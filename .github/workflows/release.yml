# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: Release

on:
  push:
    tags: 
      - '*'

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: suisei-cn/actions-download-file@v1
      id: downloadfile  # Remember to give an ID if you need the output
      name: Download the JDK
      with:
        url: "https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_windows-x64_bin.zip"
        target: ""

    - name: Extract JDK
      uses: montudor/action-zip@v0.1.0
      with:
        args: unzip -qq "openjdk-14.0.2_windows-x64_bin.zip" -d ""
    - name: Build
      run: |
        set JAVA_HOME = "jdk-14.0.2"
        set PATH = PATH;%JAVA_HOME%
        gradlew.bat RatPoison
    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Create ZIP
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r RatPoison-${{ github.ref }}.zip build/RatPoison 1.8
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: RatPoison-${{ github.ref }}.zip
          asset_name: RatPoison-${{ github.ref }}.zip
          asset_content_type: application/zip
